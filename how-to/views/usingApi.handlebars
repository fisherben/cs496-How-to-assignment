<div class="container">
	<h2 class="myHeaderText">Using the Api</h2>
	<div class="container myBodyText" >	
	<h3 class="myHeaderText">What Now?</h3>
		<p>Now we use the Api by running and learning how SkeletonTbmp is working.</p>
		<p>The <a href="https://developers.google.com/games/services/android/turnbasedMultiplayer">Google Play Games Services tutorial</a> is a good resource to get familiar with, and so if you haven't read it yet please do so.</p> 
		<p>Before we do anything I'd like to take a look at the layouts the <a href="https://github.com/playgameservices/android-basic-samples/blob/master/BasicSamples/SkeletonTbmp/src/main/res/layout/activity_main.xml">layout folder in the SkeletonTbmp module</a>.  We find one xml file called activity_main.xml.  This single xml file contains a series of layouts; login layout (this handles user authentication), gameplay_layout (this handles the layout for the game play views), matchup_layout (this handles the layouts for starting, finding and resuming matches), and then lastly there is a layout to display a progress dialog.  </p>
		<div class="well">
		<script src="https://gist.github.com/fisherben/1f974924bef50c3c98cd020e3b6b9a85.js"></script>
		</div>		
		<p>Ok now that we are a little bit more familiar with the layouts lets move on to walk through the <a href="https://github.com/playgameservices/android-basic-samples/blob/master/BasicSamples/SkeletonTbmp/src/main/java/com/google/example/tbmpskeleton/SkeletonActivity.java">SkeletonTbmp (Skeleton Turn Based Multi-Player) class</a> found in the game that we have just set up in the <a href="https://how-to-games-turn-based.appspot.com/started">Getting Started section</a>.</p>
		<p>First lets talk about <a href="https://developers.google.com/games/services/android/init">BaseGameUtilities</a> which is a library that Google Play Game Services includes in the <a href="https://github.com/playgameservices/android-basic-samples">BasicSamples/libraries</a> to simplify resolving connection errors and to display error dialogs.  BaseGameUtils Utilities is used on all samples in the <a href="https://github.com/playgameservices/android-basic-samples">BasicSamples/libraries</a>, and is available for you to use in your projects too. This is not a stand-alone sample, it's a library project.  To include the library in your project simply follow the instructions in the <a href="https://developers.google.com/games/services/android/init">Setting up your game project</a> section.</p>
		<p>Next thing to cover is what the interfaces the SkeletonActivity.java class implements are for.  We can see that the class implements 5 interfaces; <a href="https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.ConnectionCallbacks">GoogleApiClient.ConnectionCallbacks</a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient.OnConnectionFailedListener">GoogleApiClient.OnConnectionFailedListener</a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/OnInvitationReceivedListener">OnInvitationReceivedListener</a>, <a href="https://developer.android.com/reference/android/view/View.OnClickListener.html">View.OnClickListener</a>, and <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/OnTurnBasedMatchUpdateReceivedListener">OnTurnBasedMatchUpdateReceivedListener</a>.</p>
		<p>GoogleApiClient.ConnectionCallbacks is not surprisingly used to inform the client when the GoogleApiClient is connected and is used to implement logic after connection by implementing onConnected and onConnectionSuspended methods. Likewise GoogleApiClient.OnConnectionFailedListener is used to inform the client the GoogleApiClient's connection has failed and is used to implement whatever logic necessary in the onConnectionFailed callback.
        View.OnClickListener is used to handle click events detected in the application by overidding onClick.  Now the interesting interfaces with respect to the game are OnInvitationReceivedListener and OnTurnBasedMatchUpdateReceivedListener. These interfaces are not required to be included, but if the developer wishes to handle the events listened for then they can by implementing these interfaces.  OnInvitationReceivedListener is used to listen for invitations, the client needs to override the onInvitationRecieved and onInvitationRemoved methods to handle invitation events.  The OnTurnBasedMatchUpdateReceivedListener is used update a turn based match when an event is recieved, the user needs to override the methods onTurnBasedMatchRecieved and onTurnBasedMatchRemoved to handle the events.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/b9f63d0d20035c68fd322ca38b4d13e6.js"></script>
		</div>		
		
		<p>The first thing the <a href="https://github.com/playgameservices/android-basic-samples/blob/master/BasicSamples/SkeletonTbmp/src/main/java/com/google/example/tbmpskeleton/SkeletonActivity.java">SkeletonActivity.java</a> class does is attempt to build an instance of <a href="https://developers.google.com/android/guides/api-client">GoogleApiClient</a> that can automatically manage it's connection to the Google Play Services.  The <a href="https://developers.google.com/android/guides/api-client">GoogleApiClient</a> is the main entry point used to access Google Play Service Api's.  Notice that we add an api <a href="https://developers.google.com/android/reference/com/google/android/gms/games/package-summary">'Games.API'</a> and a scope 'Games.SCOPE_GAMES' when building the <a href="https://developers.google.com/android/guides/api-client">GoogleApiClient</a>.  The <a href="https://developers.google.com/android/reference/com/google/android/gms/games/Games">Games</a> object is used as the main entry point to call the API to display any default user interface.  The <a href="https://developers.google.com/android/reference/com/google/android/gms/games/Games">Games</a> is used to interface with the Google Games API and access the functionality provided by Google, so it's worth reading the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/Games">Google docs</a>.</p>
		<div class="well">
		<script src="https://gist.github.com/fisherben/f4234f439f98a069f67a8fff6d87f380.js"></script>
		</div>
		<p>Also notice that the <a href="https://developers.google.com/android/guides/api-client">GoogleApiClient</a> is connected and disconnected in onStart and onStop.  
		<div class="well">
		<script src="https://gist.github.com/fisherben/bdc906ff4d5279abeb6ccb6085e4f17e.js"></script>
		</div>		
		When <a href="https://developers.google.com/android/guides/api-client">GoogleApiClient</a> connect method is called the application will attempt to connect to Google Play Services.  If the user is not authenticated then the onConnectionFailed callback will execute and display the login layout. The application keeps track of when the login button was pressed, and handles failed connection attempts based on that information. The login layout will prompt the user for <a href="https://developers.google.com/games/services/training/signin">authentication with Google Play Games Services</a>, if the user is already connected or is in the middle of connecting the connect call is ignored.</p>
		<div class="well">
		<script src="https://gist.github.com/fisherben/08488dc4932494ba5520a40e77c31df4.js"></script>
		</div>		
		<p>When the user connects to Google Play Services the onConnected method callback is executed. Notice the method uses a parameter Bundle called connectionHint.  The connectionHint Bundle contains a  <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMatch">TurnBasedMatch object</a> that is used to update the game and is shared asynchronously with the game participants over the course of the game.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/422bf8908e3df438af541fb6d2f51fe8.js"></script>
		</div>
		<p>Inside the onConnected method two more methods are called the first is updateMatch and the second is setViewVisibility.  The updateMatch method takes a <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMatch">TurnBasedMatch</a> parameter as an argument and is the main function that is called when the user tries to select or start a match. Inside the updateMatch method two fields are extracted from the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMatch">TurnBasedMatch</a> object; match status and turn status.  Match status will tell the user if the match is still active and turn status will tell the user whose turn it is with respect to the match, if it is this clients turn then the user takes their turn and then the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMatch">TurnBasedMatch</a> object is updated as well as the user interface.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/acc1f285be663e44c8d00f4c4af021a1.js"></script>
		</div>
		<p>The setViewVisibility method is called to show and hide Android views depending on whether or not the client's <a href="https://developers.google.com/android/guides/api-client">GoogleApiClient</a> is connected or if they are playing their turn.  The application keeps track of when the player is choosing a matchup or making their turn or signed out and then displays the appropriate view.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/7e2ac78678aea56baae7e4d36be33a16.js"></script>
		</div>
		
		<p>Ok at this point in the game we have just started and installed the game and then completed the login process, we've connected to Google Play Services, so isDoingTurn in the setViewVisibility method will be false and the matchup_layout should be visible.</p>
		<p>In the matchup_layout there are 4 actions the user can take, logout, start a match, check games, and start a quick match, notice that each button in the xml declares the onClick handler that will be called for a click event. Logout simply removes the authentication and Google Play Services will no longer be available.</p>
		<p>Clicking start a match will attempt to start a new match. The player needs to tell the application about the type of match they want to set up and how many players can participate.  This can be done with custom UI or the developer can use the <a href="https://developers.google.com/games/services/android/turnbasedMultiplayer#selecting_players_with_the_default_user_interface">default user interface</a>.  Observe that in the call to the getSelectedOpponentsIntent there are 2 numbers passed, those 2 numbers represent the min and max players allowed in a game, the boolean represents allow automatch.  The game is created in the onActivityResult method which we'll talk about shortly.</p>
		<div class="well">
		<script src="https://gist.github.com/fisherben/611a5784f06c028ed2a391b9de1d1d64.js"></script>
		</div>
		<p>The check games action is similar to the start a match action, the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/Games">Games</a> object is used to display default user interface where the player can view their games and select one if they wish.</p>
		<div class="well">
		<script src="https://gist.github.com/fisherben/41ec80a5e6155606a73860d0b489bde5.js"></script>
		</div>
		<p>Start a quick match will create a bundle containing the automatch criteria using the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/realtime/RoomConfig.html#createAutoMatchCriteria(int, int, long)">RoomConfig.createAutoMatchCriteria</a> method. This method takes 3 parameters min number of automatched players, max number of automatched players and a bitmask represent the logical and(with no exclusivity set it to 0).  Next the method creates a <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMatch">TurnBasedMatch</a> object and then sets up a listener for any match events, before finally creating the match and setting the callback using the  <a href="https://developers.google.com/android/reference/com/google/android/gms/games/Games">Games</a> object.
		</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/f49478f17434bdcd4e3f6a5bf5f97a19.js"></script>
		</div>
		<p>The onActivity for result method, handles intents that were executed with the start activity for result method in Android.  The first thing the method does is handle sign in requests, and so if the intent was started with the RC_SIGN_IN code then it will get handled here when the result returns. Next is the RC_LOOK_AT_MATCHES result which will return a <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMatch">TurnBasedMatch</a> object in the intent, this will then get passed along to the updateMatch method that was discussed above.  Lastly the RC_SELECT_PLAYERS result will get handled when the start match method executes.  This block of code will construct a <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMatchConfig">TurnBasedMatchConfig</a> object using the invitees and the automatch criteria retrieved from the intent data.  Finally the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMatchConfig">TurnBasedMatchConfig</a> object is used to create and start a TurnBasedMultiplayer game.  We can see that the createMatch function creates an anonymous class that handles the callback and then calls the process result method. <a href="https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallback">ResultCallback</a> is a object used handle callbacks from pending intents.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/b0356620a0974693a7bde6f0bb4feee1.js"></script>
		</div>
		<p>The process result method is overloaded in the application and handles various results for the TurnBasedMultiplayer game. Feel free to follow the links and read the Google Docs for the various paramaters; <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.CancelMatchResult">TurnBasedMultiplayer.CancelMatchResult</a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.InitiateMatchResult">TurnBasedMultiplayer.InitiateMatchResult</a>, <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.LeaveMatchResult">TurnBasedMultiplayer.LeaveMatchResult</a>, and <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.UpdateMatchResult">TurnBasedMultiplayer.UpdateMatchResult</a>.</p>
		<p><a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.CancelMatchResult">TurnBasedMultiplayer.CancelMatchResult</a> informs the players of the match that the game has been canceled and is over.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/2c0e8bbb6252d4866b3bc4d350a7cd15.js"></script>
		</div>
		<p><a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.InitiateMatchResult">TurnBasedMultiplayer.InitiateMatchResult</a> will check to see if the match is started and if it hasn't started it will call the startMatch method.  The start match method will get the player id and then the player id is used to get the participant id, which is then used to call the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer#takeTurn">Api's take turn method</a>, which will create an anonymous class to handle the result return in the <a href="https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallback">ResultCallback</a>. </p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/84231d195c2d7f1548b358eb5f85f809.js"></script>
		</div>
		<p><a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.LeaveMatchResult">TurnBasedMultiplayer.LeaveMatchResult</a> will simply inform the player that they have left the match.
		</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/f96c0912ab2d3f5fe2821d59813b7905.js"></script>
		</div>
		<p><a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.UpdateMatchResult">TurnBasedMultiplayer.UpdateMatchResult</a> updates.  The <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer.UpdateMatchResult">TurnBasedMultiplayer.UpdateMatchResult</a> object is an object passed to players in the game when the match has been updated, and it has a single method, getMatch().  The process result method checks the status code for any errors, and then ask for a rematch if appropriate, or updates the isDoingTurn global variable and calls update Match or updateView methods which were discussed above.</p>
		<div class="well">
		<script src="https://gist.github.com/fisherben/e96da5bcb8cd0290fe013e76d16954ac.js"></script>
		</div>
		<p>Good so now we have covered the matchup_layout click events, and how they function.  Next we'll end this section by talking briefly about the gameplay_layout.  The gameplay_layout is set visible in the setViewVisibility method.  This layout will be visible when the player is in the act of making their turn.  The layout has a 4 buttons each with a unique on click handler; doneButton, cancelButton, leaveButton, and finishButton.  Lets looks at the methods called in the click events for these buttons.</p>
		<p>The done button is pressed by the player when they have finished their turn. The method sets the turn data and then calls the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer">Games.TurnBasedMultiplayer.takeTurn</a> method.  The method updates a match with new turn data. The participant that is passed in as the pending participant will be notified that it is their turn to take action. If no pending participant is provided and the match has available auto-match slots, the match will wait for additional players to be found. If there are no auto-match slots available for this match, a pending participant ID is required.  Note that players will not receive invitations for matches until this method is called. An invitation will be sent to a player the first time they are set as the pending participant of a match.  Finally the method creates an anonymous class to handle results sent back.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/829426f9bc9682147a7de3d0775609a8.js"></script>
		</div>
		<p>The cancel button, cancels the match using the <a href="https://developers.google.com/android/reference/com/google/android/gms/games/multiplayer/turnbased/TurnBasedMultiplayer">Games.TurnBasedMultiplayer.cancelMatch</a> method.  The method cancels a turn-based match. Once this call succeeds, the match will be removed from local storage. Note that this will cancel the match completely, forcing it to end for all players involved.The method then creates an anonymous class to handle results sent back.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/67e530e6d8313938433e25169cab4994.js"></script>
		</div>
		<p>The leave button when pressed will allow the user to leave the match during their turn.  The match will continue after this event and the code is similar to the the above methods.  If this takes the match to fewer than two participants, the match will be canceled. The provided pendingParticipantId will be used to determine which participant should act next. If no pending participant is provided and the match has available auto-match slots, the match will wait for additional players to be found. If there are no auto-match slots available for this match, a pending participant ID is required.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/771b07318d028c9b74a23d3084076135.js"></script>
		</div>
		<p>The finish button will finish the match. This method indicates that a participant is finished with a match. This will not change the data of the match, but it will transition the match into state MATCH_STATUS_COMPLETE if the match is not already in that state. This method is most commonly used to report that a participant has finished any post-processing steps the game might have and has seen their results in the match.</p>
		<div class="well">
			<script src="https://gist.github.com/fisherben/f834df3b7de49b5631dd41dd67774c5b.js"></script>
		</div>
		
	</div>
</div>